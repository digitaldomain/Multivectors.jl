# Copyright 2020 Digital Domain 3.0
#
# Licensed under the Apache License, Version 2.0 (the "Apache License")
# with the following modification; you may not use this file except in
# compliance with the Apache License and the following modification to it:
# Section 6. Trademarks. is deleted and replaced with:
#
# 6. Trademarks. This License does not grant permission to use the trade
#    names, trademarks, service marks, or product names of the Licensor
#    and its affiliates, except as required to comply with Section 4(c) of
#    the License and to reproduce the content of the NOTICE file.
#
# You may obtain a copy of the Apache License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the Apache License with the above modification is
# distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied. See the Apache License for the specific
# language governing permissions and limitations under the Apache License.

using Test
using Multivectors
using LinearAlgebra
using StaticArrays

module KPKG3
  using Multivectors
  @generate_basis("0+++")
end
using .KPKG3

@testset "KVectors" begin
  e‚ÇÅ, e‚ÇÇ, e‚ÇÉ, e‚ÇÑ = alle( KPKG3, 4)[1:4]
  a = e‚ÇÅ(1.0); b = e‚ÇÇ(2.0); c = e‚ÇÉ(3.0); d = e‚ÇÑ(4.0)
  @test typeof(a+a) <: Blade
  @test (typeof(a+b) <: Blade) == false
  @test typeof(a+b) <: KVector
  B = a+b
  B2 = b+c
  @test a+b+c+b+a == e‚ÇÅ(2.0) + e‚ÇÇ(4.0) + e‚ÇÉ(3.0) == 2.0a+2.0b+c
  @test a+ (-b) == a - b
  @test B+B2 == B2+B == a+2.0b+c
  @test (a+b)+(c+d) == a+b+c+d
  @test 5.0*(a+b+c+d) == 5.0*b+5.0*c+5.0*d+5.0*a
  @test grade(a+b+c) == 1
  @test grade(KVector(a*b)) == 2
  @test dual(dual(B)) == B
  @test zero(KVector(a))+b == KVector(b) == b + zero(KVector(a))
  @test zero(B)*B == zero(B) == B*zero(B) == B*zero(KVector{Float64, grade(B), 1})
  @test 3.0*B == B+B+B == B*3.0
  @test iszero(B‚àßB)
  @test 2.0‚àßB‚àßB2 == B‚àßb‚àß2.0 - c‚àßB‚àß2.0
  @test grade(B‚àßB2) == 2
  @test grade(B,1) == B
  @test reverse(B) == B
  @test reverse(B‚àßB2) == -B‚àßB2
  @test B-B == -a - -B - b

  @test dual(prune(B-B)) == prune(B-B)
  @test iszero(KVector(0.0e‚ÇÇ))
  @test iszero(1.0e‚ÇÅ-1.0e‚ÇÅ)
  @test dual(B) == !B

#!me passes with Blades v0.1.1+  @test normalize(KVector(-2.2(e‚ÇÇ‚àße‚ÇÉ))) == KVector(normalize(-2.2(e‚ÇÇ‚àße‚ÇÉ))) == Multivectors.normalize_safe(KVector(-2.2(e‚ÇÇ‚àße‚ÇÉ)))
end

module KG3
  using Multivectors
  @generate_basis("+++",false,true,true)
end
using .KG3
 
@testset "More KVectors" begin
  e‚ÇÅ, e‚ÇÇ, e‚ÇÉ = alle(KG3, 3)[1:3]
  ùêº = alle(KG3,3)[end]

  a = sort_basis(1.0e‚ÇÅ + 3.0e‚ÇÉ)

  @test eltype(a) <: Blade
  @test size(a) == (2,)
  @test a == KVector([1.0,0.0,3.0], KG3) |> Multivectors.prune
  @test sort_basis(1.0e‚ÇÇ) == 1.0e‚ÇÇ
  @test convert(KVector, 1.0e‚ÇÇ) == KVector(1.0e‚ÇÇ)
  @test first(a) == a[1]
  @test firstindex(a) == 1
  @test a[end] == a[2]
  @test isnull(a) == false
  @test length(a) == 2
  @test isempty(a) == false
  @test [i for i in a] == map(i->i, a) |> collect == (i for i in a) |> collect 
  B = -1.0(e‚ÇÅ‚àße‚ÇÇ) + 2.0(e‚ÇÅ‚àße‚ÇÉ)
  x = 0.0
  for i in a
    x = x+scalar(i)
  end
  @test x == mapreduce(scalar, +, a)

  @test promote_rule(typeof(KVector(1e‚ÇÅ)), typeof(1e‚ÇÅ)) == KVector

  @test conj(a) == a
  @test conj(B) == -B
  @test KVector(a) == a
  @test KVector([1,2,3], ùêº) == 1e‚ÇÅ+2e‚ÇÇ+3e‚ÇÉ
  @test pseudoscalar(a) == pseudoscalar(a[1])
  @test grade(‚üÇ(a)‚àßa) == grade(pseudoscalar(a))
  @test a/2.0 == a*0.5
  @test !(a == a‚àße‚ÇÇ(1.0))

  @test coords(a) == scalar.(sort_basis(a+0.0e‚ÇÇ))
  @test coords(a[1]) == [scalar(a[1]), 0.0, 0.0]
  @test Multivectors.prune(KVector(coords(a) .* basis_1blades(a))) == a
  @test norm(basis_1vector(a)) == sqrt(3.0)
  @test Multivectors.norm_sqr(a) == mapreduce(a·µ¢->a·µ¢*a·µ¢, +, a)
  @test norm(Multivectors.normalize_safe(a)) == norm(normalize(a))

  @test grade(‚ãÜ(a)) == grade(pseudoscalar(a))-grade(a)

  # warning these relys on LinearAlebra.:‚ãÖ (dot product) 
  # which only works on KVectors of grade p with matching sorted basis p-vectors present
  # for a robust inner product you should be using Multivectors.jl
  @test det(1.0e‚ÇÅ+1.0e‚ÇÇ, 1.0e‚ÇÅ+1.0e‚ÇÇ) == 1.0
  @test det(1.0e‚ÇÅ+1.0e‚ÇÇ, 1.0e‚ÇÅ+1.0e‚ÇÇ+1.0e‚ÇÉ) == 0.0
  @test cos(KVector([1.0,0.0,0.0], ùêº), KVector([1.0,1.0,0.0], ùêº)) ‚âà cos(œÄ/4)

  f·µ¢ = [rand()*e‚ÇÅ + rand()*e‚ÇÇ + rand()*e‚ÇÉ for i in 1:3]
  f‚Å± = reciprocal_frame(f·µ¢)
  @test [a‚ãÖb for a in f·µ¢ for b in f‚Å±] |> sum ‚âà 3.0

  # this is a neat property of reciprocal frames f·µ¢f‚Å± == n via geometric product,  an integer!
  @test grade(mapreduce(*, +, f·µ¢, f‚Å±), 0) ‚âà 3.0
  @test norm(grade(mapreduce(*, +, f·µ¢, f‚Å±), 0)) ‚âà 3.0
  # not neccessarily parrallel 
  @test !(norm.(map(‚àß, f·µ¢, f‚Å±)) |> sum ‚âà 0.0)  
  # only if source frame was orthogonal 
  e·µ¢ = 1.0 .* basis_1blades(e‚ÇÅ)
  e‚Å± = reciprocal_frame(e·µ¢)
  @test norm.(map(‚àß,e·µ¢, e‚Å±)) |> sum ‚âà 0.0
  
end

@testset "Null KVectors" begin
  e‚ÇÅ, e‚ÇÇ, e‚ÇÉ = alle(KG3, 3)[1:3]
  n = KVector{Float64,1,0}()
  nn = KVector{Float64,1,0}()
  a = KVector{Float64,1,1}([1.0e‚ÇÅ])

  @test iszero(n)
  @test isnull(n+n)
  @test n+a == a == a+n
  @test isnull(n*n)
  @test iszero(dual(n))
  @test iszero(‚üÇ(n))
end

